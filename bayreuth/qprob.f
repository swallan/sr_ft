      FUNCTION CV (P, RR, CC, DF, IR)
C
C   FUNCTION SUBPROGRAM CV
C   USES SECANT METHOD TO FIND CRITICAL VALUES
C
C   P =  CONFIDENCE LEVEL (1 - ALPHA)
C   RR = NO. OF ROWS OR GROUPS
C   CC = NO. OF COLUMNS OR TREATMENTS
C   DF = DEGREES OF FREEDOM OF ERROR TERM
C   IR(1) = ERROR FLAG = 1 IF WPROB PROBABILITY > 1
C   IR(2) = ERROR FLAG = 1 IF QPROB PROBABILITY > 1
C   IR(3) = ERROR FLAG = 1 IF CONVERGENCE NOT REACHED IN 50 ITERATIONS
C                      = 2 IF DF < 2
C   CV = RETURNED CRITICAL VALUE
C   PROGRAM WILL NOT TERMINATE IF IR(1) OR IR(2) ARE RAISED.
C   PROGRAM WILL TERMINATE IF IR(3) IS RAISED.
C
      IMPLICIT REAL*16 (A-H, O-Z)
C
C   IF DIFFERENCE BETWEEN SUCCESSIVE ITERATES < EPS, SEARCH IS TERMINATED
C   IF PROBABILITY OF INITIAL ESTIMATE IS LESS THAN EPS0, INCREASE ITS VALUE.
      PARAMETER (EPS = 0.0001Q0, EPS0 = 0.1Q0)
C
      DIMENSION IR(3), IT(2)
C
C XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
C   DF MUST BE > 1
      IF (DF .LT. 2.0)
     #THEN
        IR(3) = 2
        GO TO 900
      ENDIF
      ITER = 0
      IR(3) = 0
C
C  INITIAL VALUE USING USER-WRITTEN FUNCTION
      X0 = QINV (P, CC, DF)
C
C   FIND PROB(VALUE < X0)
      VALX0 = QPROB (X0, RR, CC, DF, IT)
C  IF VALX0 IS WITHIN EPS0 OF 0 THEN INCREASE INITIAL ESTIMATE BY 2.
      IF (VALX0 .LT. EPS0)
     #THEN
        X0 = X0 + 2.0
        VALX0 = QPROB (X0, RR, CC, DF, IT)
      ENDIF
      VALX0 = VALX0 - P
      IF (IT(1) .EQ. 1) IR(1) = 1
      IF (IT(2) .EQ. 1) IR(2) = 1
C
C   FIND SECOND ITERATE AND PROB(VALUE < X1)
C   IF FIRST ITERATE HAS PROBABILITY VALUE EXCEEDING P THEN SECOND
C    ITERATE IS 1 LESS THAN FIRST ITERATE;   ELSE IT IS 1 GREATER.
      IF (VALX0 .GT. 0.0)
     #THEN
        X1 = QMAX1 (0.0Q0, X0 - 1.0)
      ELSE
        X1 = X0 + 1.0
      ENDIF
C
      VALX1 = QPROB (X1, RR, CC, DF, IT) - P
      IF (IT(1) .EQ. 1) IR(1) = 1
      IF (IT(2) .EQ. 1) IR(2) = 1
C
C   FIND NEW ITERATE
   50 CV =  X1 - VALX1 * (X1 - X0) / (VALX1 - VALX0)
      VALX0 = VALX1
      X0 = X1
C
C   NEW ITERATE MUST BE >= 0
      IF (CV .LT. 0.0)
     #THEN
       CV = 0.0
       VALX1 = -P
      ENDIF
C
C     FIND PROB(VALUE < NEW ITERATE)
      VALX1 = QPROB (CV, RR, CC, DF, IT) - P
      IF (IT(1) .EQ. 1) IR(1) = 1
      IF (IT(2) .EQ. 1) IR(2) = 1
C
      X1 = CV
      ITER = ITER + 1
      IF (ITER .EQ. 51) GO TO 100
      XABS = QABS (X1 - X0)
C   IF THE DIFFERENCE BETWEEN TWO SUCCESSIVE ITERATES < EPSILON, STOP
      IF (XABS .LT. EPS) GO TO 900
      GO TO 50
C
  100 IR(3) = 1
  900 RETURN
      END
C
      FUNCTION QPROB (Q, RR, CC, DF, IR)
C
C   FUNCTION SUBPROGRAM QPROB
C
C   Q = VALUE OF STUDENTIZED RANGE
C   RR = NO. OF ROWS OR GROUPS
C   CC = NO. OF COLUMNS OR TREATMENTS
C   DF = DEGREES OF FREEDOM OF ERROR TERM
C   IR(1) = ERROR FLAG = 1 IF WPROB PROBABILITY > 1
C   IR(2) = ERROR FLAG = 1 IF QPROB PROBABILITY > 1
C   QPROB = RETURNED PROBABILITY INTEGRAL FROM (0, Q)
C   PROGRAM WILL NOT TERMINATE IF IR(1) OR IR(2) ARE RAISED.
C
C   ALL REFERENCES IN WPROB AND QLGAMA TO ABRAMOWITZ AND STEGUN
C   ARE FROM THE FOLLOWING REFERENCE:
C    ABRAMOWITZ, MILTON AND STEGUN, IRENE A.  HANDBOOK OF MATHEMATICAL
C    FUNCTIONS.  NEW YORK:  DOVER PUBLICATIONS, INC. (1970).
C    ALL CONSTANTS TAKEN FROM THIS TEXT ARE GIVEN TO 25 SIGNIFICANT DIGITS.
C
      IMPLICIT REAL*16 (A-H, O-Z)
C
C   NLEGQ = ORDER OF LEGENDRE QUADRATURE; EPS = MAX. ALLOWABLE VALUE OF INTEGRAL
C   EPS1 & EPS2 = VALUES BELOW WHICH THERE IS NO CONTRIBUTION TO INTEGRAL.
C   D.F. <= DHAF:   INTEGRAL IS DIVIDED INTO ULEN1 LENGTH INTERVALS.  ELSE
C   D.F. <= DQUAR:  INTEGRAL IS DIVIDED INTO ULEN2 LENGTH INTERVALS.  ELSE
C   D.F. <= DEIGH:  INTEGRAL IS DIVIDED INTO ULEN3 LENGTH INTERVALS.  ELSE
C   D.F. <= DLARG:  INTEGRAL IS DIVIDED INTO ULEN4 LENGTH INTERVALS.
C   D.F. > DLARG:   THE RANGE IS USED TO CALCULATE INTEGRAL.
      PARAMETER (NLEGQ = 16, EPS = 1.0Q0,
     #   EPS1 = -30.0Q0, EPS2 = 1.0Q-14,
     #   DHAF = 100.0Q0, DQUAR = 800.0Q0, DEIGH = 5000.0Q0,
     #   DLARG = 25000.0Q0,
     #   ULEN1 = 1.0Q0, ULEN2 = 0.5Q0, ULEN3 = 0.25Q0, ULEN4 = 0.125Q0)
C
C   R2 = LOG(2)
      DATA R2/ 0.693147180559945309417232121458Q0/
C
      COMMON /QUADRQ/ XLEGQ, ALEGQ
      DIMENSION IR(2)
      DIMENSION XLEGQ(NLEGQ), ALEGQ(NLEGQ)
C
C   THE COEFFICIENTS AND NODES FOR THE LEGENDRE QUADRATURE USED IN QPROB AND
C   WPROB WERE CALCULATED USING THE ALGORITHMS FOUND IN:
C   STROUD, A. H. AND SECREST, D.  GAUSSIAN QUADRATURE FORMULAS.  ENGLEWOOD
C   CLIFFS, NEW JERSEY:  PRENTICE-HALL, INC, 1966.
C   ALL VALUES MATCHED THE TABLES (PROVIDED IN SAME REFERENCE) TO 30
C   SIGNIFICANT DIGITS.
C
C   FORTRAN FUNCTIONS QERF, QERFC, QEXP, QLOG, AND QSQRT
C   HAVE MAXIMUM RELATIVE ERROR:
C   MAX(CALC(X) - TRUE(X)) / TRUE(X))
C   OF 8 * 10 ** -33.
C
C   F(X) = .5 + QERF(X / SQRT(2)) / 2      FOR X > 0
C   F(X) = QERFC( -X / SQRT(2)) / 2        FOR X < 0
C   WHERE F(X) IS STANDARD NORMAL C. D. F.
C
C XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
C   NLEGQ AND IHALFQ WILL BE HARD CODED, AS WILL THE LEGENDRE NODES (XLEGQ) AND
C   COEFFICIENTS (ALEGQ), WHEN NLEGQ IS DECIDED.
      IHALFQ = INT ((NLEGQ + 1.0) / 2.0)
      IR(2)= 0
C
C   IF DEGREES OF FREEDOM LARGE, APPROXIMATE INTEGRAL WITH RANGE DISTRIBUTION.
      IF (DF .GT. DLARG)
     #THEN
        QPROB = WPROB (Q, RR, CC, IT)
        IF (IT .EQ. 1) IR(1) = 1
        GO TO 900
      ENDIF
C
C   CALCULATE LEADING CONSTANT
C   QLGAMA IS USER-WRITTEN FUNCTION.
      F2 = DF * 0.5Q0
      F2LF = F2 * QLOG (DF) - DF * R2 - QLGAMA (F2)
      F21 = F2 - 1.0
      FF4 = DF * 0.25Q0
C
C   INTEGRAL IS DIVIDED INTO UNIT, HALF-UNIT, QUARTER-UNIT, OR
C   EIGHTH-UNIT LENGTH INTERVALS DEPENDING ON THE VALUE OF THE
C   DEGREES OF FREEDOM.
      IF (DF .LE. DHAF)
     #THEN
        ULEN = ULEN1
      ELSEIF (DF .LE. DQUAR)
     #THEN
        ULEN = ULEN2
      ELSEIF (DF .LE. DEIGH)
     #THEN
        ULEN = ULEN3
      ELSE
        ULEN = ULEN4
      ENDIF
      F2LF = F2LF + QLOG (ULEN)
C
      QPROB = 0.0
C
C   INTEGRATE OVER EACH SUBINTERVAL
      DO 300 I = 1, 50
          OTSUM = 0.0
          TWA1 = (2.Q0 * I - 1.0) * ULEN
C
C       LEGENDRE QUADRATURE WITH ORDER = NLEGQ
C       NODES (STORED IN XLEGQ) ARE SYMMETRIC AROUND ZERO.
          DO 200 JJ = 1, NLEGQ
C
              IF (IHALFQ .LT. JJ)
     #        THEN
                J = JJ  - IHALFQ
                T1 = F2LF + F21 * QLOG (TWA1 + XLEGQ(J) * ULEN) -
     #               (XLEGQ(J) * ULEN + TWA1) * FF4
              ELSE
                J = JJ
                T1 = F2LF + F21 * QLOG (TWA1 - XLEGQ(J) * ULEN) +
     #               (XLEGQ(J) * ULEN - TWA1) * FF4
              ENDIF
C
C           IF EXP(T1) < 9E-14, THEN DOESN'T CONTRIBUTE TO INTEGRAL
              IF (T1 .GE. EPS1)
     #        THEN
                IF (IHALFQ .LT. JJ)
     #          THEN
                  QSQZ = Q * QSQRT ((XLEGQ(J) * ULEN + TWA1) * 0.5Q0)
                ELSE
                  QSQZ = Q * QSQRT ((-XLEGQ(J) * ULEN + TWA1) * 0.5Q0)
                ENDIF
C
C             CALL WPROB TO FIND INTEGRAL OF RANGE PORTION
                WPRB = WPROB (QSQZ, RR, CC, IT)
C
                IF (IT .EQ. 1) IR(1) = 1
                  ROTSUM = WPRB * ALEGQ(J) * QEXP (T1)
                  OTSUM = ROTSUM + OTSUM
              ENDIF
C
  200     CONTINUE
C
C       END LEGENDRE INTEGRAL FOR INTERVAL I
C
C       IF INTEGRAL FOR INTERVAL I < 1E-14, THEN STOP.  HOWEVER,
C       IN ORDER TO AVOID SMALL AREA UNDER LEFT TAIL, AT LEAST
C       1 / ULEN INTERVALS ARE CALCULATED.
          IF (I * ULEN .GE. 1.0 .AND. OTSUM .LE. EPS2) GO TO 400
  300 QPROB = QPROB + OTSUM
C
C   END OF INTERVAL I
C
  400 IF (QPROB. GT. EPS) IR(2) = 1
      IF (QPROB .GT. 1.0 .AND. QPROB .LE. EPS) QPROB = 1.0
  900 RETURN
      END
C
      FUNCTION WPROB (W, RR, CC, IR)
C
C   THIS FUNCTION SUBPROGRAM CALCULATES INTEGRAL OF HARTLEY'S FORM
C   OF THE RANGE.
C
C   W = VALUE OF RANGE
C   RR = NO. OF ROWS OR GROUPS
C   CC = NO. OF COLUMNS OR TREATMENTS
C   IR = ERROR FLAG = 1 IF WPROB PROBABILITY > 1
C   WPROB = RETURNED PROBABILITY INTEGRAL FROM (0, W)
C   PROGRAM WILL NOT TERMINATE IF IR IS RAISED.
C
      IMPLICIT REAL*16 (A-H, O-Z)
C
C   BB = UPPER LIMIT OF LEGENDRE INTEGRATION
C   EPS = MAXIMUM ACCEPTABLE VALUE OF INTEGRAL
C   NLEG = ORDER OF LEGENDRE QUADRATURE
C   WLAR = VALUE OF RANGE ABOVE WHICH WINCR1 INTERVALS ARE USED TO
C   CALCULATE SECOND PART OF INTEGRAL,
C   ELSE WINCR2 INTERVALS ARE USED.
C   EPS1, EPS2, EPS3 = VALUES WHICH ARE USED AS CUTOFFS FOR TERMINATING
C   OR MODIFYING A CALCULATION.
      PARAMETER (BB = 8.0Q0, EPS = 1.0Q0, NLEG = 12,
     #   WLAR = 3.0Q0, WINCR1 = 2.0Q0, WINCR2 = 3.0Q0,
     #   EPS1 = -30.0Q0, EPS2 = -50.0Q0, EPS3 = 60.0Q0)
C
C   SQ2PII = 1 / SQRT(2 * PI);  FROM ABRAMOWITZ & STEGUN, P. 3.
C   QSQR2 = SQRT(2)
      DATA SQ2PII /0.3989422804014326779399461Q0/,
     #      QSQR2 /1.41421356237309504880168872421Q0/
C
      COMMON /QUADRW/ XLEG, ALEG
      DIMENSION XLEG(NLEG), ALEG(NLEG)
C
C XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
      IR = 0
      QSQZ = W * 0.5Q0
      WPROB = 1.0
C   IF W >= 16 THEN INTEGRAL LOWER BOUND (OCCURS FOR C=20) IS 0.99999999999995
C   SO RETURN A VALUE OF 1.
      IF (QSQZ .GE. BB) GO TO 900
C
C   FIND (F(W/2) - 1) ** CC (FIRST TERM IN INTEGRAL OF HARTLEY'S FORM).
      WPROB = QERF (QSQZ / QSQR2)
C   IF WPROB ** CC < 2E-22 THEN SET WPROB = 0
      IF (WPROB .GE. QEXP(EPS2 / CC))
     #THEN
        WPROB = WPROB ** CC
      ELSE
        WPROB = 0.0
      ENDIF
C
C   IF W IS LARGE THEN SECOND COMPONENT OF INTEGRAL IS SMALL, SO FEWER
C   INTERVALS ARE NEEDED.
      IF (W. GT. WLAR)
     #THEN
        WINCR = WINCR1
      ELSE
        WINCR = WINCR2
      ENDIF
C
C   FIND INTEGRAL OF SECOND TERM OF HARTLEY'S FORM FOR INTEGRAL
C   OF THE RANGE FOR EQUAL-LENGTH INTERVALS USING LEGENDRE QUADRATURE.
C   LIMITS OF INTEGRATION ARE FROM (W/2, 8).
C   TWO  OR THREE EQUAL-LENGTH INTERVALS ARE USED.
C
C   BLB AND BUB ARE LOWER AND UPPER LIMITS OF INTEGRATION.
      BLB = QSQZ
      BINC = (BB - QSQZ) / WINCR
      BUB = BLB + BINC
      EINSUM = 0.0
      CC1 = CC - 1.0
C   NLEG AND IHALF WILL BE HARD CODED, AS WILL THE LEGENDRE NODES (XLEG) AND
C   COEFFICIENTS (ALEG), WHEN NLEG IS DECIDED.
      IHALF = INT ((NLEG + 1.0) / 2.0)
C
C   INTEGRATE OVER EACH INTERVAL
      DO 300 WI = 1, WINCR
          ELSUM = 0.0
          A = 0.5Q0 * (BUB + BLB)
          B = 0.5Q0 * (BUB - BLB)
C
C       LEGENDRE QUADRATURE WITH ORDER = NLEG
          DO 100 JJ = 1, NLEG
C
              IF (IHALF .LT. JJ)
     #        THEN
                J = NLEG - JJ + 1
                XX = XLEG(J)
              ELSE
                J = JJ
                XX = -XLEG(J)
              ENDIF
C
              C = B * XX
              AC = A + C
              QEXPO = AC * AC
C           IF EXP(-QEXPO/2) < 9E-14, THEN DOESN'T CONTRIBUTE TO INTEGRAL
              IF (QEXPO .GT. EPS3) GO TO 200
C
              IF (AC .GT. 0.0)
     #        THEN
                PPLUS = 1.0 + QERF (AC / QSQR2)
              ELSE
                PPLUS = QERFC (-AC / QSQR2)
              ENDIF
C
              IF (AC .GT. W)
     #        THEN
                PMINUS = 1.0 + QERF (AC / QSQR2 - W / QSQR2)
              ELSE
                PMINUS = QERFC (W / QSQR2 - AC / QSQR2)
              ENDIF
C
              RINSUM = PPLUS * 0.5Q0 - PMINUS * 0.5Q0
C
C           IF RINSUM ** (CC-1) < 9E-14, THEN DOESN'T CONTRIBUTE TO INTEGRAL
              IF (RINSUM .GE. QEXP (EPS1 / CC1))
     #        THEN
                RINSUM = ALEG(J) * QEXP (-0.5Q0 * QEXPO)
     #            * RINSUM ** CC1
                ELSUM = ELSUM + RINSUM
              ENDIF
C
  100     CONTINUE
C       END LEGENDRE QUADRATURE
C
  200     ELSUM = 2.0 * B * CC * SQ2PII * ELSUM
          EINSUM = EINSUM + ELSUM
          BLB = BUB
          BUB = BUB + BINC
C
  300 CONTINUE
C   END INTEGRATION OF SECOND TERM
C
      WPROB = EINSUM + WPROB
C
C   IF WPROB ** RR < 9E-14, THEN RETURN 0.0
      IF (WPROB .LE. QEXP (EPS1 / RR))
     #THEN
        WPROB = 0.0
        GO TO 900
      ENDIF
C
      WPROB = WPROB ** RR
      IF (WPROB .GT. EPS) IR = 1
      IF (WPROB .GT. 1.0 .AND. WPROB .LE. EPS) WPROB = 1.0
  900 RETURN
      END
C
      FUNCTION QLGAMA (X)
C
C   THIS FUNCTION SUBPROGRAM CALCULATES THE LOG GAMMA OF X.
C   FOR X SMALL, CALCULATION IS EXACT; ELSE AN APPROXIMATION IS USED.
C
      IMPLICIT REAL*16 (A-H, O-Z)
C
C   XX IS BOUNDARY FOR EXACT VS APPROXIMATE CALCULATION.
      PARAMETER (XX = 21.0Q0)
C
C   SQRPI= SQRT(PI) & GAMMA(1/2);   FROM ABRAMOWITZ & STEGUN , P. 3.
C   GSQR2P = 0.5 * LOG(2 * PI) ;  FROM ABRAMOWITZ & STEGUN, P. 3.
      DATA SQRPI /1.772453850905516027298167Q0/,
     #      GSQR2P /0.9189385332046727417803297Q0/,
     #      O12  /0.833333333333333333333333333333Q-01/,
     #      O30  /30.Q0/,  O35 /3.5Q0/,
     #      O13  /1.33333333333333333333333333333Q0/,
     #      O71 / 0.707142857142857142857142857143Q0/
C
C XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
      FRAC = X - INT(X)
C   IF X < XX & X IS AN INTEGER THEN GAMMA(X) = (X - 1) FACTORIAL
      IF (X .LT. XX .AND. FRAC .EQ. 0.0)
     #THEN
        QLGAMA = 1.0
        Y = X - 1.0
        DO  100 A = 1.0, Y
          QLGAMA = QLGAMA * A
  100   CONTINUE
        QLGAMA = QLOG (QLGAMA)
C
C   IF X < XX & FRAC = 0.5 THEN GAMMA(X) IS
C   FORMULA 6.1.12 IN ABRAMOWITZ & STEGUN, P. 255.
      ELSEIF (X .LT. XX)
     #THEN
        QLGAMA = 1.0
        Y = 2.0 * X - 1.0
        DO 200 A = 1.0, Y, 2.0
          QLGAMA = QLGAMA * A * 0.5Q0
  200   CONTINUE
        QLGAMA = QLOG (QLGAMA * SQRPI)
C
C   IF X >= XX THEN LOG GAMMA(X) IS FORMULA 6.1.41 IN
C    ABRAMOWITZ & STEGUN, P. 257.
C   THE MAXIMUM RELATIVE ERROR ASSOCIATED WITH THIS FORMULA IS 1.3E-19
C   WHICH OCCURS AT X = 21.  ERROR DECREASES AS X INCREASES.  FOR EXAMPLE,
C   THE ERROR FOR X = 50 IS 2.5E-24.
      ELSE
        Y = 1.0 / (X * X)
        QLGAMA = O12 * ( 1.0 - Y / O30 * (1.0 - Y / O35
     #    * (1.0 - Y / O13 * (1.0 - Y / O71)))) /  X
        QLGAMA = QLGAMA + GSQR2P + (X - 0.5Q0) * QLOG(X) - X
      ENDIF
C
  900 RETURN
      END
C
      FUNCTION QINV (P, C, V)
C
C   THIS FUNCTION FINDS PERCENTAGE POINT OF THE STUDENTIZED RANGE
C   WHICH IS USED AS INITIAL ESTIMATE FOR THE SECANT METHOD.
C   FUNCTION IS ADAPTED FROM PORTION OF ALGORITHM AS 70
C   FROM APPLIED STATISTICS (1974) ,VOL. 23, NO. 1
C   BY ODEH, R. E. AND EVANS, J. O.
C
C   P = PERCENTAGE POINT
C   C = NO. OF COLUMNS OR TREATMENTS
C   V = DEGREES OF FREEDOM
C   QINV = RETURNED INITIAL ESTIMATE
C
      REAL*16 P, C, V, QINV
C
C   VMAX IS CUTOFF ABOVE WHICH DEGREES OF FREEDOM IS TREATED AS INFINITY.
      PARAMETER (VMAX = 120.0)
C
      DATA P0 /0.322232421088/,        Q0 /0.993484626060E-01/,
     #     P1 /-1.0/,                  Q1 /0.588581570495/,
     #     P2 /-0.342242088547/,       Q2 /0.531103462366/,
     #     P3 /-0.204231210125/,       Q3 /0.103537752850/,
     #     P4 /-0.453642210148E-04/,   Q4 /0.38560700634E-02/
     #     C1 /0.8832/,    C2 /0.2368/,    C3 /1.214/,
     #     C4 /1.208/,     C5 /1.4142/
C
C XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
C
      PS = 0.5 - 0.5 * P
      YI = SQRT (ALOG (1.0 / (PS * PS)))
      T = YI + (((( YI * P4 + P3) * YI + P2) * YI + P1) * YI + P0)
     #       / (((( YI * Q4 + Q3) * YI + Q2) * YI + Q1) * YI + Q0)
      IF (V .LT. VMAX) T = T + (T * T * T + T) / V / 4.0
      Q = C1 - C2 * T
      IF (V .LT. VMAX) Q = Q - C3 / V + C4 * T / V
      QINV = T * (Q * QLOG (C - 1.0) + C5)
  900 RETURN
      END
